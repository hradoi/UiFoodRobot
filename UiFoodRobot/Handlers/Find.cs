using CrawlerLibrary;
using Microsoft.Bot.Connector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using CrawlerLibrary.Model;

using Bot = Microsoft.Bot.Connector;

namespace UiFoodRobot
{
    public static class Find
    {
        private static OutputMenu[] loadFromDatabaseUsingCategories(string[] categories)
        {
            YellowFoodConstructor yellowFoodRepository = new YellowFoodConstructor();
            return yellowFoodRepository.SearchTodaysMenu(categories);
        }

        public static Message TestCreateCommand(Command command, Message message, bool fromDatabase = true)
        {
            List<string> ignoredKeywords = new List<string> { "de", "si", "cu", "and", "la", "sau" };
            string[] categories = new string[0];

            // trasnform parameters into query items (by removing fake positives generated by prepositions)
            // but allowing "" to be counted as a search term - thus simulating a return all
            if (command.Parameters != null)
                categories = command.Parameters.Where(p => !ignoredKeywords.Contains(p)).ToArray<string>();

            if (command.Parameters == null || categories.Count() == 0)
                return Reply.Create(message, "Please try again, using more relevant parameters.");

            Message replyMessage = Reply.CreateAttachment(message);
            // identify data source
            OutputMenu[] menuItems;
            if (fromDatabase)
            {
                // load from database
                menuItems = loadFromDatabaseUsingCategories(categories);
            }
            else
            {
                // load from botuserdata
                var x = message.GetBotUserData<OutputMenu[]>("returnedMenuItems");
                replyMessage.Text = x[0].Name;
                if (x != null)
                    menuItems = x;
                else
                {
                    menuItems = loadFromDatabaseUsingCategories(categories); //fallback
                    replyMessage.Text = "yes";
                }
            }

            if (menuItems.Length < 1)
            {
                return Reply.Create(message, "I couldn't find anything, please try again!");
            }

            //Message replyMessage = Reply.CreateAttachment(message);

            Attachment attachment = new Attachment()
            {
                Text = "Pick one:",
                Actions = new List<Bot.Action>()
            };


            //foreach (var x in menuItems)
            for (var x = 0; x < menuItems.Length; x++)
            {
                attachment.Actions.Add(new Bot.Action() { Title = menuItems[x].Name, Message = $"Add {menuItems[x].Name}"});
            }
            replyMessage.Attachments.Add(attachment);

            // persist data
            //replyMessage.SetBotUserData("from", message.GetBotUserData<string>("from"));
            //replyMessage.SetBotUserData("order", message.GetBotUserData<Dictionary<string, int>>("order"));
            replyMessage.SetBotUserData("returnedMenuItems", menuItems);

            return replyMessage;

        }
    }
}



/* Recycled refuse
 * 
 * 
 * List<string> ignoredKeywords = new List<string> { "de", "si", "cu", "and", "la", "sau" };
            if (command.Parameters == null)
                return Reply.Create(message, "Please try again, using more relevant parameters.");
            // trasnform parameters into query items (by removing fake positives generated by prepositions)
            // but allowing "" to be counted as a search term - thus simulating a return all
            var categories = command.Parameters.Where(p => !ignoredKeywords.Contains(p)).ToArray<string>();
            if (categories.Count() == 0)
                return Reply.Create(message, "Please try again, using more relevant parameters.");

            Message replyMessage = Reply.CreateAttachment(message);

            // identify data source
            OutputMenu[] menuItems;
            if (fromDatabase)
            {
                // load from database
                menuItems = loadFromDatabaseUsingCategories(categories);
            }
            else
            {
                // load from botuserdata
                var x = message.GetBotUserData<OutputMenu[]>("returnedMenuItems");
                replyMessage.Text = x[0].Name;
                if (x != null)
                    menuItems = x;
                else
                {
                    menuItems = loadFromDatabaseUsingCategories(categories); //fallback
                    replyMessage.Text = "yes";
                }
            }

            if (menuItems.Length < 1)
            {
                return Reply.Create(message, "I couldn't find anything, please try again!");
            }

            //Message replyMessage = Reply.CreateAttachment(message);

            Attachment attachment = new Attachment()
            {
                Text = "Pick one:",
                Actions = new List<Bot.Action>()
            };


            //foreach (var x in menuItems)
            for (var x = 0; x < (menuItems.Length > 5 ? 5: menuItems.Length); x++)
            {
                attachment.Actions.Add(new Bot.Action() { Title = menuItems[x].Name, Message = $"Add {menuItems[x].Name}"});
            }
            replyMessage.Attachments.Add(attachment);

            // persist data
            //replyMessage.SetBotUserData("from", message.GetBotUserData<string>("from"));
            //replyMessage.SetBotUserData("order", message.GetBotUserData<Dictionary<string, int>>("order"));
            replyMessage.SetBotUserData("returnedMenuItems", menuItems);

            return replyMessage;



    */